#!/bin/bash
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again.  This script gets executed directly, so it could be python, php,
# ruby, etc.

VENV=${OPENSHIFT_GEAR_DIR}/virtenv/bin/python

if [ ! -f ${OPENSHIFT_REPO_DIR}/bin/buildout ]
then
    pushd ${OPENSHIFT_REPO_DIR}

    # create some dirs
    if [ ! -d ${OPENSHIFT_TMP_DIR}/${OPENSHIFT_APP_UUID}-cache/ ]
    then 
        mkdir ${OPENSHIFT_TMP_DIR}/${OPENSHIFT_APP_UUID}-cache/
    fi

    if [ ! -d ${OPENSHIFT_DATA_DIR}/eggs/ ]
    then
        mkdir ${OPENSHIFT_DATA_DIR}/eggs/ 
    fi 

    if [ ! -d ${OPENSHIFT_DATA_DIR}/egg-cache/ ]
    then 
        mkdir ${OPENSHIFT_DATA_DIR}/egg-cache/
    fi

    # initialize a buildout.cfg using the environment
    cat >> openshift-buildout.cfg << EOF
[buildout]
extends = buildout.cfg
eggs-directory = ${OPENSHIFT_DATA_DIR}/eggs/
download-cache = ${OPENSHIFT_TMP_DIR}/${OPENSHIFT_APP_UUID}-cache/
extends-cache = ${OPENSHIFT_TMP_DIR}/${OPENSHIFT_APP_UUID}-cache/
effective-user = ${OPENSHIFT_APP_UUID}
log-directory = ${OPENSHIFT_LOG_DIR}
data-directory = ${OPENSHIFT_DATA_DIR}
listen-address = ${OPENSHIFT_INTERNAL_IP}
listen-port = ${OPENSHIFT_INTERNAL_PORT}
pyeggcache-directory = ${OPENSHIFT_DATA_DIR}/egg-cache/
run-directory = ${OPENSHIFT_RUN_DIR}
host = ${OPENSHIFT_APP_DNS}
EOF

    # bootstrap
    ${VENV} bootstrap.py -c openshift-buildout.cfg

    # build!
    ./bin/buildout -vvvv -c openshift-buildout.cfg
    rm -f ./wsgi/application
    cp ./bin/wsgi ./wsgi/application
    # symlink log dir
    mkdir var/
    ln -s ${OPENSHIFT_LOG_DIR} var/log
    popd
fi
